package Othello;

public class Othelloboard {
	private int[][] board;
	private int playersTurn; // vit = (-1), svart = (1)
	private boolean[][] legalMoves; //om det går att lägga på denna plats för nuvarande spelare
	private int blackPoints;
	private int whitePoints;
	
	public Othelloboard() {
<<<<<<< HEAD
		this.board = new int[8][8]; //nytt tomt bord
		setBoard();
		this.playersTurn = 1; //svart börjar
		this.legalMoves = new boolean[8][8];  //sätter upp legalmoves
		setLegalMoves();
	}
	//sätter upp bordet. Alla tomma förutom de två i mitten.
	private void setBoard(){
		for (int i = 0; i < 8; i++){
			for (int j = 0; j < 8; j++){
				this.board[i][j] = 0;
			}
		}
		this.board[3][3] = -1;
		this.board[4][4] = -1;
		this.board[3][4] = 1;
		this.board[4][3] = 1;
		this.blackPoints = 2;
		this.whitePoints = 2;
=======
		
	
>>>>>>> 5d948325aa098865feb6e27bd1d5b2096e0f4bc5
	}
	
	//sätter legalMoves i början för svart spelare
	private void setLegalMoves(){
		for (int i = 0; i < 8; i++){
			for (int j = 0; j < 8; j++){
				this.legalMoves[i][j] = false;
			}
		}
		updateLegalMoves(); //ska göra så svart kan lägga på 4 ställen i detta fall.
	}
		
	//metod som lägger ny bit
<<<<<<< HEAD
	public boolean put(int i, int j){
		if(this.legalMoves[i][j] == true){
			updateBoard(i,j);
			updateLegalMoves();
			return true;
		}
		else{
			return false;
		}
	}
	
	private void updateBoard(int i, int j){
		this.board[i][j] = playersTurn;
	}
	
	//metod som uppdaterar legal moves
	private void updateLegalMoves(){
			int counter = 0;
			for(int i = 0; i < 8; i++ ){
				for(int j = 0; j < 8 ; j++){
					if(this.board[i][j] == 0){
						int x = i;
						int y = j;
						int[] neighbor = checkNeighbor();		//lägger in alla grannar i en lista
						for (int nNr: neighbor){
							int internalCount = 0;
							switch (nNr){
								case 1 : if(x > 1 && y > 1){
											x--;
											y--;
											while(this.board[x][y] != playersTurn && this.board[x][y] != 0){
												if(x > 0 && y > 0){
													x--;
													y--;
												}
												internalCount ++;
											}
											if(this.board[x][y] == 0){
												internalCount = 0;
											}
									
									
								}
							}
							counter = counter + internalCount;
						}
					}
				}
				
			}
	}
	
=======
		//metod som räknar ut hur nya matrisen ser ut vid
	

>>>>>>> 5d948325aa098865feb6e27bd1d5b2096e0f4bc5
}